#!/bin/zsh
#set -x

TOOL_NAME="Microsoft Outlook Web Add-in Promotion"
TOOL_VERSION="3.1"

## Copyright (c) 2022 Microsoft Corp. All rights reserved.
## Scripts are not supported under any Microsoft standard support program or service. The scripts are provided AS IS without warranty of any kind.
## Microsoft disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a 
## particular purpose. The entire risk arising out of the use or performance of the scripts and documentation remains with you. In no event shall
## Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever 
## (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or other pecuniary 
## loss) arising out of the use of or inability to use the sample scripts or documentation, even if Microsoft has been advised of the possibility
## of such damages.
## Feedback: pbowden@microsoft.com

# This script tells New Outlook to promote WebEx and Zoom add-ins to the New Event toolbar if they are present.
# This aids with feature discoverability, especially for users who are moving from classic Outlook with a plug-in to New Outlook with a web add-in.
# The script sets the default state for the toolbar, but still allows users to customize it.
# This script should be run on each Mac, ideally through a management agent.

GetLoggedInUser() {
	LOGGEDIN=$(/bin/echo "show State:/Users/ConsoleUser" | /usr/sbin/scutil | /usr/bin/awk '/Name :/&&!/loginwindow/{print $3}')
	if [ "$LOGGEDIN" = "" ]; then
		echo "$USER"
	else
		echo "$LOGGEDIN"
	fi
}

SetHomeFolder() {
	HOME=$(dscl . read /Users/"$1" NFSHomeDirectory | cut -d ':' -f2 | cut -d ' ' -f2)
	if [ "$HOME" = "" ]; then
		if [ -d "/Users/$1" ]; then
			HOME="/Users/$1"
		else
			HOME=$(eval echo "~$1")
		fi
	fi
}

CheckToolbarExistence() {
	VIEW="$1"
	FILE="$2"
	sudo -u $LoggedInUser /usr/libexec/PlistBuddy -c "print $VIEW" "$FILE" | grep -q "Array"
	echo "$?"
}

AddToolbar() {
	VIEW="$1"
	VALUE="$2"
	FILE="$3"
	# Check to see if the toolbar preference exists
	sudo -u $LoggedInUser /usr/libexec/PlistBuddy -c "print $VIEW" "$FILE" | grep -q "Array"
	if [ $? = 1 ]; then
		# The toolbar preference doesn't exist, so let's create it
		sudo -u $LoggedInUser /usr/libexec/PlistBuddy -c "add $VIEW array" "$FILE"
	fi
	# Check to see if the specified value already exists in the toolbar
	sudo -u $LoggedInUser /usr/libexec/PlistBuddy -c "print $VIEW" "$FILE" | grep -q "$VALUE"
	if [ $? = 1 ]; then
		# The value doesn't already exist, so let's add it
		echo "INFO: Adding $VALUE to toolbar $VIEW in $FILE"
		sudo -u $LoggedInUser /usr/libexec/PlistBuddy -c "add :$VIEW: string $VALUE" "$FILE"
	else
		echo "INFO: $VALUE already exists in toolbar $VIEW"
	fi
}

## Main
LoggedInUser=$(GetLoggedInUser)
SetHomeFolder "$LoggedInUser"

## Constants
OUTLOOK_CONTAINER_PREFS="$HOME/Library/Containers/com.microsoft.Outlook/Data/Library/Preferences/com.microsoft.Outlook.plist"
OUTLOOK_USER_PREFS="$HOME/Library/Preferences/com.microsoft.Outlook.plist"

# Check to make sure Outlooks preferences have been created in the container (i.e. Outlook has been run at least once)
if [ -f "$OUTLOOK_CONTAINER_PREFS" ]; then
	echo "Outlook preferences file found in container"
	OUTLOOK_PREFS="$OUTLOOK_CONTAINER_PREFS"
else
	echo "Using Outlook preferences file in user object"
	OUTLOOK_PREFS="$OUTLOOK_USER_PREFS"
fi
	
# Toolbar MailToolView is the main toolbar that you see across the top of the UI when looking at the Mail module
MailToolViewExists=$(CheckToolbarExistence "ToolbarCustomization_MailToolView_Preference" "$OUTLOOK_PREFS")
if [ $MailToolViewExists = 1 ]; then
	echo "Mail Toolbar preferences do not exist. Creating"
	AddToolbar "ToolbarCustomization_MailToolView_Preference" "delete" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_MailToolView_Preference" "archive" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_MailToolView_Preference" "moveTo" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_MailToolView_Preference" "followUp" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_MailToolView_Preference" "toggleUnread" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_MailToolView_Preference" "sendReceive" "$OUTLOOK_PREFS"
fi

# Toolbar NestedReplyToolView is the toolbar that you see in the compose window. Send and Discard buttons are hardcoded
ReplyToolViewExists=$(CheckToolbarExistence "ToolbarCustomization_NestedReplyToolView_Preference" "$OUTLOOK_PREFS")
if [ $ReplyToolViewExists = 1 ]; then
	echo "Reply Toolbar preferences do not exist. Creating"
	AddToolbar "ToolbarCustomization_NestedReplyToolView_Preference" "attach" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_NestedReplyToolView_Preference" "signature" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_NestedReplyToolView_Preference" "sensitivity" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_NestedReplyToolView_Preference" "editorPane" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_NestedReplyToolView_Preference" "accessibilityChecker" "$OUTLOOK_PREFS"
fi

# Toolbar CalendarEventEditorToolView is the compose form for new events
CalendarToolViewExists=$(CheckToolbarExistence "ToolbarCustomization_CalendarEventEditorToolView_Preference" "$OUTLOOK_PREFS")
if [ $CalendarToolViewExists = 1 ]; then
	echo "Calendar Toolbar preferences do not exist. Creating"
	AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "freeBusy" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "togglePrivateEvent" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "attendeeOptions" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "showScheduleAssistant" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "attach" "$OUTLOOK_PREFS"
fi
# Custom entries
AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "a7ca6c74-33fb-43a4-a3e4-781078f0eff5-msgReadGroup" "$OUTLOOK_PREFS" # Zoom
AddToolbar "ToolbarCustomization_CalendarEventEditorToolView_Preference" "7a91e319-a65d-4ceb-909b-12203561dbf5-apptOrganizerCommandGroup" "$OUTLOOK_PREFS" # WebEx

# Toolbar CalendarEventPreviewToolView is the read form for existing events
EventPreviewToolViewExists=$(CheckToolbarExistence "ToolbarCustomization_CalendarEventPreviewToolView_Preference" "$OUTLOOK_PREFS")
if [ $EventPreviewToolViewExists = 1 ]; then
	echo "Event Preview Toolbar preferences do not exist. Creating"
	AddToolbar "ToolbarCustomization_CalendarEventPreviewToolView_Preference" "freeBusy" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventPreviewToolView_Preference" "togglePrivateEvent" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventPreviewToolView_Preference" "replyToMeeting" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventPreviewToolView_Preference" "forwardMeeting" "$OUTLOOK_PREFS"
	AddToolbar "ToolbarCustomization_CalendarEventPreviewToolView_Preference" "options" "$OUTLOOK_PREFS"
fi

exit 0
